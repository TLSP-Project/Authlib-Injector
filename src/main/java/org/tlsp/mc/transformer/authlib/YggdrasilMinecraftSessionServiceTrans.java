package org.tlsp.mc.transformer.authlib;

import org.objectweb.asm.*;
import org.objectweb.asm.tree.*;
import static org.objectweb.asm.Opcodes.*;

import org.tlsp.mc.AgentMain;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;

import java.net.MalformedURLException;
import java.net.URL;
import java.security.ProtectionDomain;


public class YggdrasilMinecraftSessionServiceTrans implements ClassFileTransformer {
    private static String MojangSessionServer = "https://sessionserver.mojang.com";
    private static URL JOIN_URL;
    private static URL CHECK_URL;

    private boolean isLastAReturn = false;

    //com.mojang.authlib.yggdrasil.YggdrasilMinecraftSessionService

    @Override
    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        if (!"com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService".equals(className)){
            return classfileBuffer;
        }

        System.err.println("===》获取到验证服务 \t" + loader);

        try {
            JOIN_URL = new URL(AgentMain.API_URL + "/session/minecraft/join");
            CHECK_URL = new URL(AgentMain.API_URL + "/session/minecraft/hasJoined");
        } catch (MalformedURLException e) {
            throw new IllegalClassFormatException("URL 初始化失败");
        }

        ClassNode cn = new ClassNode(Opcodes.ASM5);
        ClassReader cr = new ClassReader(classfileBuffer);
        ClassWriter cw = new ClassWriter(cr,ClassWriter.COMPUTE_FRAMES);
        cr.accept(new ClassVisitor(Opcodes.ASM5,cw) {
            @Override
            public MethodVisitor visitMethod(int access, String name, String desc,String signature, String[] exceptions) {
                MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);

                if ("<clinit>".equals(name) && "()V".equals(desc)){
                    return new MethodVisitor(Opcodes.ASM5, mv) {
                        @Override
                        public void visitLdcInsn(Object cst) {
                            if (cst instanceof String){
                                String val = ((String)cst);
                                if(val.startsWith(MojangSessionServer)) {
                                    cst = val.replace(MojangSessionServer,AgentMain.API_URL);
                                }
                            }
                            super.visitLdcInsn(cst);
                        }
                    };
                }
                else if(access == Opcodes.ACC_PUBLIC && "fillProfileProperties".equals(name)){
                    mv.visitVarInsn(ALOAD,0);
                    mv.visitVarInsn(ALOAD,1);
                    mv.visitInsn(Opcodes.ICONST_0);
                    mv.visitMethodInsn(INVOKEVIRTUAL,"com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService","fillGameProfile","(Lcom/mojang/authlib/GameProfile;Z)Lcom/mojang/authlib/GameProfile;",false);
                    mv.visitInsn(ARETURN);
                    mv.visitMaxs(-1, -1);
                    mv.visitEnd();
                    return null;
                }
                else if(access == Opcodes.ACC_PROTECTED && "fillGameProfile".equals(name)){
                    Label l0 = new Label();
                    Label l1 = new Label();
                    Label l2 = new Label();
                    mv.visitTryCatchBlock(l0, l1, l2, "com/mojang/authlib/exceptions/AuthenticationException");
                    Label l3 = new Label();
                    Label l4 = new Label();
                    mv.visitTryCatchBlock(l3, l4, l2, "com/mojang/authlib/exceptions/AuthenticationException");
                    mv.visitLabel(l0);
                    mv.visitLineNumber(160, l0);
                    mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
                    mv.visitLdcInsn(AgentMain.API_URL + "/session/minecraft/profile/");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/GameProfile", "getId", "()Ljava/util/UUID;", false);
                    mv.visitMethodInsn(INVOKESTATIC, "com/mojang/util/UUIDTypeAdapter", "fromUUID", "(Ljava/util/UUID;)Ljava/lang/String;", false);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
                    mv.visitMethodInsn(INVOKESTATIC, "com/mojang/authlib/HttpAuthenticationService", "constantURL", "(Ljava/lang/String;)Ljava/net/URL;", false);
                    mv.visitVarInsn(ASTORE, 3);
                    Label l5 = new Label();
                    mv.visitLabel(l5);
                    mv.visitLineNumber(161, l5);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
                    mv.visitLdcInsn("unsigned=");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                    mv.visitVarInsn(ILOAD, 2);
                    Label l6 = new Label();
                    mv.visitJumpInsn(IFNE, l6);
                    mv.visitInsn(ICONST_1);
                    Label l7 = new Label();
                    mv.visitJumpInsn(GOTO, l7);
                    mv.visitLabel(l6);
                    mv.visitFrame(Opcodes.F_FULL, 4, new Object[]{"com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "com/mojang/authlib/GameProfile", Opcodes.INTEGER, "java/net/URL"}, 2, new Object[]{"java/net/URL", "java/lang/StringBuilder"});
                    mv.visitInsn(ICONST_0);
                    mv.visitLabel(l7);
                    mv.visitFrame(Opcodes.F_FULL, 4, new Object[]{"com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "com/mojang/authlib/GameProfile", Opcodes.INTEGER, "java/net/URL"}, 3, new Object[]{"java/net/URL", "java/lang/StringBuilder", Opcodes.INTEGER});
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Z)Ljava/lang/StringBuilder;", false);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
                    mv.visitMethodInsn(INVOKESTATIC, "com/mojang/authlib/HttpAuthenticationService", "concatenateURL", "(Ljava/net/URL;Ljava/lang/String;)Ljava/net/URL;", false);
                    mv.visitVarInsn(ASTORE, 3);
                    Label l8 = new Label();
                    mv.visitLabel(l8);
                    mv.visitLineNumber(162, l8);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "getAuthenticationService", "()Lcom/mojang/authlib/yggdrasil/YggdrasilAuthenticationService;", false);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitInsn(ACONST_NULL);
                    mv.visitLdcInsn(Type.getType("Lcom/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse;"));
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService", "makeRequest", "(Ljava/net/URL;Ljava/lang/Object;Ljava/lang/Class;)Lcom/mojang/authlib/yggdrasil/response/Response;", false);
                    mv.visitTypeInsn(CHECKCAST, "com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse");
                    mv.visitVarInsn(ASTORE, 4);
                    Label l9 = new Label();
                    mv.visitLabel(l9);
                    mv.visitLineNumber(163, l9);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitJumpInsn(IFNONNULL, l3);
                    Label l10 = new Label();
                    mv.visitLabel(l10);
                    mv.visitLineNumber(164, l10);
                    mv.visitFieldInsn(GETSTATIC, "com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "LOGGER", "Lorg/apache/logging/log4j/Logger;");
                    mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
                    mv.visitLdcInsn("Couldn't fetch profile properties for ");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", false);
                    mv.visitLdcInsn(" as the profile does not exist");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
                    mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "debug", "(Ljava/lang/String;)V", true);
                    Label l11 = new Label();
                    mv.visitLabel(l11);
                    mv.visitLineNumber(165, l11);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitLabel(l1);
                    mv.visitInsn(ARETURN);
                    mv.visitLabel(l3);
                    mv.visitLineNumber(167, l3);
                    mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse"}, 0, null);
                    mv.visitTypeInsn(NEW, "com/mojang/authlib/GameProfile");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse", "getId", "()Ljava/util/UUID;", false);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse", "getName", "()Ljava/lang/String;", false);
                    mv.visitMethodInsn(INVOKESPECIAL, "com/mojang/authlib/GameProfile", "<init>", "(Ljava/util/UUID;Ljava/lang/String;)V", false);
                    mv.visitVarInsn(ASTORE, 5);
                    Label l12 = new Label();
                    mv.visitLabel(l12);
                    mv.visitLineNumber(168, l12);
                    mv.visitVarInsn(ALOAD, 5);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/GameProfile", "getProperties", "()Lcom/mojang/authlib/properties/PropertyMap;", false);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse", "getProperties", "()Lcom/mojang/authlib/properties/PropertyMap;", false);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/properties/PropertyMap", "putAll", "(Lcom/google/common/collect/Multimap;)Z", false);
                    mv.visitInsn(POP);
                    Label l13 = new Label();
                    mv.visitLabel(l13);
                    mv.visitLineNumber(169, l13);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/GameProfile", "getProperties", "()Lcom/mojang/authlib/properties/PropertyMap;", false);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse", "getProperties", "()Lcom/mojang/authlib/properties/PropertyMap;", false);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/properties/PropertyMap", "putAll", "(Lcom/google/common/collect/Multimap;)Z", false);
                    mv.visitInsn(POP);
                    Label l14 = new Label();
                    mv.visitLabel(l14);
                    mv.visitLineNumber(170, l14);
                    mv.visitFieldInsn(GETSTATIC, "com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "LOGGER", "Lorg/apache/logging/log4j/Logger;");
                    mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
                    mv.visitLdcInsn("Successfully fetched profile properties for ");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", false);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
                    mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "debug", "(Ljava/lang/String;)V", true);
                    Label l15 = new Label();
                    mv.visitLabel(l15);
                    mv.visitLineNumber(171, l15);
                    mv.visitVarInsn(ALOAD, 5);
                    mv.visitLabel(l4);
                    mv.visitInsn(ARETURN);
                    mv.visitLabel(l2);
                    mv.visitLineNumber(173, l2);
                    mv.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "com/mojang/authlib/GameProfile", Opcodes.INTEGER}, 1, new Object[]{"com/mojang/authlib/exceptions/AuthenticationException"});
                    mv.visitVarInsn(ASTORE, 3);
                    Label l16 = new Label();
                    mv.visitLabel(l16);
                    mv.visitLineNumber(174, l16);
                    mv.visitFieldInsn(GETSTATIC, "com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "LOGGER", "Lorg/apache/logging/log4j/Logger;");
                    mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
                    mv.visitLdcInsn("Couldn't look up profile properties for ");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", false);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "warn", "(Ljava/lang/String;Ljava/lang/Throwable;)V", true);
                    Label l17 = new Label();
                    mv.visitLabel(l17);
                    mv.visitLineNumber(175, l17);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitInsn(ARETURN);
                    Label l18 = new Label();
                    mv.visitLabel(l18);
                    mv.visitLocalVariable("url", "Ljava/net/URL;", null, l5, l2, 3);
                    mv.visitLocalVariable("response", "Lcom/mojang/authlib/yggdrasil/response/MinecraftProfilePropertiesResponse;", null, l9, l2, 4);
                    mv.visitLocalVariable("result", "Lcom/mojang/authlib/GameProfile;", null, l12, l2, 5);
                    mv.visitLocalVariable("e", "Lcom/mojang/authlib/exceptions/AuthenticationException;", null, l16, l18, 3);
                    mv.visitLocalVariable("this", "Lcom/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService;", null, l0, l18, 0);
                    mv.visitLocalVariable("profile", "Lcom/mojang/authlib/GameProfile;", null, l0, l18, 1);
                    mv.visitLocalVariable("requireSecure", "Z", null, l0, l18, 2);
                    mv.visitMaxs(-1, -1);
                    mv.visitEnd();

                    return null;
                }
                else if("getTextures".equals(name)){

                    Label l0 = new Label();
                    Label l1 = new Label();
                    Label l2 = new Label();
                    mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
                    Label l3 = new Label();
                    Label l4 = new Label();
                    mv.visitTryCatchBlock(l3, l4, l2, "java/lang/Exception");
                    mv.visitLabel(l0);
                    mv.visitLineNumber(111, l0);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/GameProfile", "getProperties", "()Lcom/mojang/authlib/properties/PropertyMap;", false);
                    mv.visitLdcInsn("textures");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/properties/PropertyMap", "get", "(Ljava/lang/Object;)Ljava/util/Collection;", false);
                    mv.visitInsn(ACONST_NULL);
                    mv.visitMethodInsn(INVOKESTATIC, "com/google/common/collect/Iterables", "getFirst", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/lang/Object;", false);
                    mv.visitTypeInsn(CHECKCAST, "com/mojang/authlib/properties/Property");
                    mv.visitVarInsn(ASTORE, 4);
                    Label l5 = new Label();
                    mv.visitLabel(l5);
                    mv.visitLineNumber(112, l5);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitJumpInsn(IFNONNULL, l3);
                    Label l6 = new Label();
                    mv.visitLabel(l6);
                    mv.visitLineNumber(114, l6);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitVarInsn(ALOAD, 1);
                    mv.visitInsn(ICONST_0);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "fillGameProfile", "(Lcom/mojang/authlib/GameProfile;Z)Lcom/mojang/authlib/GameProfile;", false);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/GameProfile", "getProperties", "()Lcom/mojang/authlib/properties/PropertyMap;", false);
                    mv.visitLdcInsn("textures");
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/properties/PropertyMap", "get", "(Ljava/lang/Object;)Ljava/util/Collection;", false);
                    mv.visitInsn(ACONST_NULL);
                    mv.visitMethodInsn(INVOKESTATIC, "com/google/common/collect/Iterables", "getFirst", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/lang/Object;", false);
                    mv.visitTypeInsn(CHECKCAST, "com/mojang/authlib/properties/Property");
                    mv.visitVarInsn(ASTORE, 4);
                    Label l7 = new Label();
                    mv.visitLabel(l7);
                    mv.visitLineNumber(115, l7);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitJumpInsn(IFNONNULL, l3);
                    Label l8 = new Label();
                    mv.visitLabel(l8);
                    mv.visitLineNumber(117, l8);
                    mv.visitTypeInsn(NEW, "java/util/HashMap");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
                    mv.visitLabel(l1);
                    mv.visitInsn(ARETURN);
                    mv.visitLabel(l3);
                    mv.visitLineNumber(122, l3);
                    mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{Opcodes.TOP, "com/mojang/authlib/properties/Property"}, 0, null);
                    mv.visitTypeInsn(NEW, "java/lang/String");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/properties/Property", "getValue", "()Ljava/lang/String;", false);
                    mv.visitMethodInsn(INVOKESTATIC, "org/apache/commons/codec/binary/Base64", "decodeBase64", "(Ljava/lang/String;)[B", false);
                    mv.visitFieldInsn(GETSTATIC, "org/apache/commons/codec/Charsets", "UTF_8", "Ljava/nio/charset/Charset;");
                    mv.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BLjava/nio/charset/Charset;)V", false);
                    mv.visitVarInsn(ASTORE, 5);
                    Label l9 = new Label();
                    mv.visitLabel(l9);
                    mv.visitLineNumber(124, l9);
                    mv.visitVarInsn(ALOAD, 0);
                    mv.visitFieldInsn(GETFIELD, "com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "gson", "Lcom/google/gson/Gson;");
                    mv.visitVarInsn(ALOAD, 5);
                    mv.visitLdcInsn(Type.getType("Lcom/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload;"));
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/google/gson/Gson", "fromJson", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;", false);
                    mv.visitTypeInsn(CHECKCAST, "com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload");
                    mv.visitInsn(DUP);
                    mv.visitVarInsn(ASTORE, 3);
                    Label l10 = new Label();
                    mv.visitLabel(l10);
                    Label l11 = new Label();
                    mv.visitJumpInsn(IFNULL, l11);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload", "getTextures", "()Ljava/util/Map;", false);
                    Label l12 = new Label();
                    mv.visitJumpInsn(IFNONNULL, l12);
                    mv.visitLabel(l11);
                    mv.visitLineNumber(126, l11);
                    mv.visitFrame(Opcodes.F_FULL, 6, new Object[]{"com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "com/mojang/authlib/GameProfile", Opcodes.INTEGER, "com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload", "com/mojang/authlib/properties/Property", "java/lang/String"}, 0, new Object[]{});
                    mv.visitTypeInsn(NEW, "java/util/HashMap");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
                    mv.visitLabel(l4);
                    mv.visitInsn(ARETURN);
                    mv.visitLabel(l12);
                    mv.visitLineNumber(133, l12);
                    mv.visitFrame(Opcodes.F_CHOP, 2, null, 0, null);
                    Label l13 = new Label();
                    mv.visitJumpInsn(GOTO, l13);
                    mv.visitLabel(l2);
                    mv.visitLineNumber(129, l2);
                    mv.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "com/mojang/authlib/GameProfile", Opcodes.INTEGER}, 1, new Object[]{"java/lang/Exception"});
                    mv.visitVarInsn(ASTORE, 4);
                    Label l14 = new Label();
                    mv.visitLabel(l14);
                    mv.visitLineNumber(131, l14);
                    mv.visitVarInsn(ALOAD, 4);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
                    Label l15 = new Label();
                    mv.visitLabel(l15);
                    mv.visitLineNumber(132, l15);
                    mv.visitTypeInsn(NEW, "java/util/HashMap");
                    mv.visitInsn(DUP);
                    mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
                    mv.visitInsn(ARETURN);
                    mv.visitLabel(l13);
                    mv.visitLineNumber(134, l13);
                    mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload"}, 0, null);
                    mv.visitVarInsn(ALOAD, 3);
                    mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload", "getTextures", "()Ljava/util/Map;", false);
                    mv.visitInsn(ARETURN);
                    Label l16 = new Label();
                    mv.visitLabel(l16);
                    mv.visitLocalVariable("textureProperty", "Lcom/mojang/authlib/properties/Property;", null, l5, l12, 4);
                    mv.visitLocalVariable("json", "Ljava/lang/String;", null, l9, l12, 5);
                    mv.visitLocalVariable("result", "Lcom/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload;", null, l10, l2, 3);
                    mv.visitLocalVariable("e", "Ljava/lang/Exception;", null, l14, l13, 4);
                    mv.visitLocalVariable("this", "Lcom/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService;", null, l0, l16, 0);
                    mv.visitLocalVariable("profile", "Lcom/mojang/authlib/GameProfile;", null, l0, l16, 1);
                    mv.visitLocalVariable("requireSecure", "Z", null, l0, l16, 2);
                    mv.visitLocalVariable("result", "Lcom/mojang/authlib/yggdrasil/response/MinecraftTexturesPayload;", null, l13, l16, 3);
                    mv.visitMaxs(4, 6);
                    mv.visitEnd();

                    return null;
                }
                else if("isWhitelistedDomain".equals(name)){
                    mv.visitInsn(Opcodes.ICONST_1);
                    mv.visitInsn(Opcodes.IRETURN);
                    mv.visitMaxs(-1, -1);
                    mv.visitEnd();
                    return null;
                }
                else if("joinServer".equals(name)){
                    //joinServer代码块
                    if (true){
                        Label l0 = new Label();
                        Label l1 = new Label();
                        Label l2 = new Label();
                        mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
                        Label l3 = new Label();
                        Label l4 = new Label();
                        Label l5 = new Label();
                        mv.visitTryCatchBlock(l3, l4, l5, "java/lang/Exception");
                        Label l6 = new Label();
                        Label l7 = new Label();
                        mv.visitTryCatchBlock(l6, l7, l5, "java/lang/Exception");
                        Label l8 = new Label();
                        mv.visitLabel(l8);
                        mv.visitLineNumber(82, l8);
                        mv.visitFieldInsn(GETSTATIC, "org/tlsp/mc/wrapper/TLSPAgentWrapper", "Instance", "Lorg/tlsp/mc/wrapper/TLSPAgentWrapper;");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "org/tlsp/mc/wrapper/TLSPAgentWrapper", "IsMACServer", "()Z", false);
                        mv.visitVarInsn(ISTORE, 4);
                        Label l9 = new Label();
                        mv.visitLabel(l9);
                        mv.visitLineNumber(83, l9);
                        mv.visitFieldInsn(GETSTATIC, "org/tlsp/mc/wrapper/TLSPAgentWrapper", "Instance", "Lorg/tlsp/mc/wrapper/TLSPAgentWrapper;");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "org/tlsp/mc/wrapper/TLSPAgentWrapper", "IsMACClient", "()Z", false);
                        mv.visitVarInsn(ISTORE, 5);
                        Label l10 = new Label();
                        mv.visitLabel(l10);
                        mv.visitLineNumber(85, l10);
                        mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
                        mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
                        mv.visitInsn(DUP);
                        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
                        mv.visitLdcInsn("Is MacServer ");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                        mv.visitVarInsn(ILOAD, 4);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Z)Ljava/lang/StringBuilder;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
                        Label l11 = new Label();
                        mv.visitLabel(l11);
                        mv.visitLineNumber(86, l11);
                        mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
                        mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
                        mv.visitInsn(DUP);
                        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
                        mv.visitLdcInsn("Is MacClient ");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Z)Ljava/lang/StringBuilder;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
                        mv.visitLabel(l0);
                        mv.visitLineNumber(89, l0);
                        mv.visitFieldInsn(GETSTATIC, "org/tlsp/mc/wrapper/TLSPAgentWrapper", "Instance", "Lorg/tlsp/mc/wrapper/TLSPAgentWrapper;");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "org/tlsp/mc/wrapper/TLSPAgentWrapper", "IsLoadMAC", "()Z", false);
                        Label l12 = new Label();
                        mv.visitJumpInsn(IFEQ, l12);
                        Label l13 = new Label();
                        mv.visitLabel(l13);
                        mv.visitLineNumber(91, l13);
                        mv.visitVarInsn(ILOAD, 4);
                        Label l14 = new Label();
                        mv.visitJumpInsn(IFEQ, l14);
                        Label l15 = new Label();
                        mv.visitLabel(l15);
                        mv.visitLineNumber(92, l15);
                        mv.visitLdcInsn("serverIdHex");
                        mv.visitMethodInsn(INVOKESTATIC, "org/tlsp/mc/utils/NetworkUtils", "getTGlobalValue", "(Ljava/lang/String;)Ljava/lang/String;", false);
                        mv.visitVarInsn(ASTORE, 3);
                        Label l16 = new Label();
                        mv.visitLabel(l16);
                        mv.visitLineNumber(94, l16);
                        mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
                        mv.visitLdcInsn("Repleace ServerId: %s");
                        mv.visitInsn(ICONST_1);
                        mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
                        mv.visitInsn(DUP);
                        mv.visitInsn(ICONST_0);
                        mv.visitVarInsn(ALOAD, 3);
                        mv.visitInsn(AASTORE);
                        mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
                        mv.visitLabel(l14);
                        mv.visitLineNumber(96, l14);
                        mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
                        mv.visitTypeInsn(NEW, "org/tlsp/mc/wrapper/mac/MixinCallbackInfoWrapper");
                        mv.visitInsn(DUP);
                        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getContextClassLoader", "()Ljava/lang/ClassLoader;", false);
                        mv.visitLdcInsn("joinServer");
                        mv.visitInsn(ICONST_1);
                        mv.visitMethodInsn(INVOKESPECIAL, "org/tlsp/mc/wrapper/mac/MixinCallbackInfoWrapper", "<init>", "(Ljava/lang/ClassLoader;Ljava/lang/String;Z)V", false);
                        mv.visitVarInsn(ASTORE, 6);
                        Label l17 = new Label();
                        mv.visitLabel(l17);
                        mv.visitLineNumber(98, l17);
                        mv.visitTypeInsn(NEW, "org/tlsp/mc/wrapper/mac/ProtectedMixinMethodsWrapper");
                        mv.visitInsn(DUP);
                        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getContextClassLoader", "()Ljava/lang/ClassLoader;", false);
                        mv.visitMethodInsn(INVOKESPECIAL, "org/tlsp/mc/wrapper/mac/ProtectedMixinMethodsWrapper", "<init>", "(Ljava/lang/ClassLoader;)V", false);
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitVarInsn(ALOAD, 2);
                        mv.visitVarInsn(ALOAD, 3);
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "org/tlsp/mc/wrapper/mac/ProtectedMixinMethodsWrapper", "joinServer", "(Lcom/mojang/authlib/GameProfile;Ljava/lang/String;Ljava/lang/String;Lorg/tlsp/mc/wrapper/mac/MixinCallbackInfoWrapper;)V", false);
                        Label l18 = new Label();
                        mv.visitLabel(l18);
                        mv.visitLineNumber(99, l18);
                        Label l19 = new Label();
                        mv.visitJumpInsn(GOTO, l19);
                        mv.visitLabel(l12);
                        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
                        mv.visitVarInsn(ILOAD, 5);
                        mv.visitJumpInsn(IFEQ, l19);
                        Label l20 = new Label();
                        mv.visitLabel(l20);
                        mv.visitLineNumber(100, l20);
                        mv.visitLdcInsn("canJoinServer");
                        mv.visitInsn(ACONST_NULL);
                        mv.visitMethodInsn(INVOKESTATIC, "org/tlsp/mc/utils/NetworkUtils", "putTGlobalValue", "(Ljava/lang/String;Ljava/lang/String;)Z", false);
                        mv.visitInsn(POP);
                        Label l21 = new Label();
                        mv.visitLabel(l21);
                        mv.visitLineNumber(102, l21);
                        mv.visitLdcInsn("profileName");
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/GameProfile", "getName", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKESTATIC, "org/tlsp/mc/utils/NetworkUtils", "putTGlobalValue", "(Ljava/lang/String;Ljava/lang/String;)Z", false);
                        mv.visitInsn(POP);
                        Label l22 = new Label();
                        mv.visitLabel(l22);
                        mv.visitLineNumber(103, l22);
                        mv.visitLdcInsn("profileUUID");
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/GameProfile", "getId", "()Ljava/util/UUID;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/UUID", "toString", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKESTATIC, "org/tlsp/mc/utils/NetworkUtils", "putTGlobalValue", "(Ljava/lang/String;Ljava/lang/String;)Z", false);
                        mv.visitInsn(POP);
                        Label l23 = new Label();
                        mv.visitLabel(l23);
                        mv.visitLineNumber(104, l23);
                        mv.visitLdcInsn("authenticationToken");
                        mv.visitVarInsn(ALOAD, 2);
                        mv.visitMethodInsn(INVOKESTATIC, "org/tlsp/mc/utils/NetworkUtils", "putTGlobalValue", "(Ljava/lang/String;Ljava/lang/String;)Z", false);
                        mv.visitInsn(POP);
                        Label l24 = new Label();
                        mv.visitLabel(l24);
                        mv.visitLineNumber(105, l24);
                        mv.visitLdcInsn("serverIdHex");
                        mv.visitVarInsn(ALOAD, 3);
                        mv.visitMethodInsn(INVOKESTATIC, "org/tlsp/mc/utils/NetworkUtils", "putTGlobalValue", "(Ljava/lang/String;Ljava/lang/String;)Z", false);
                        mv.visitInsn(POP);
                        Label l25 = new Label();
                        mv.visitLabel(l25);
                        mv.visitLineNumber(106, l25);
                        mv.visitLdcInsn("netState");
                        mv.visitLdcInsn("NeedEncrypt,Join");
                        mv.visitMethodInsn(INVOKESTATIC, "org/tlsp/mc/utils/NetworkUtils", "putTGlobalValue", "(Ljava/lang/String;Ljava/lang/String;)Z", false);
                        mv.visitInsn(POP);
                        Label l26 = new Label();
                        mv.visitLabel(l26);
                        mv.visitLineNumber(109, l26);
                        mv.visitLdcInsn("canJoinServer");
                        mv.visitLdcInsn(new Long(60L));
                        mv.visitMethodInsn(INVOKESTATIC, "org/tlsp/mc/utils/NetworkUtils", "tryGetTGlobalValue", "(Ljava/lang/String;J)Ljava/lang/String;", false);
                        mv.visitInsn(POP);
                        mv.visitLabel(l1);
                        mv.visitLineNumber(112, l1);
                        mv.visitInsn(RETURN);
                        mv.visitLabel(l19);
                        mv.visitLineNumber(118, l19);
                        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
                        Label l27 = new Label();
                        mv.visitJumpInsn(GOTO, l27);
                        mv.visitLabel(l2);
                        mv.visitLineNumber(114, l2);
                        mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Exception"});
                        mv.visitVarInsn(ASTORE, 6);
                        Label l28 = new Label();
                        mv.visitLabel(l28);
                        mv.visitLineNumber(115, l28);
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
                        Label l29 = new Label();
                        mv.visitLabel(l29);
                        mv.visitLineNumber(116, l29);
                        mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/Object;)V", false);
                        Label l30 = new Label();
                        mv.visitLabel(l30);
                        mv.visitLineNumber(117, l30);
                        mv.visitTypeInsn(NEW, "com/mojang/authlib/exceptions/AuthenticationException");
                        mv.visitInsn(DUP);
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "getMessage", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKESPECIAL, "com/mojang/authlib/exceptions/AuthenticationException", "<init>", "(Ljava/lang/String;)V", false);
                        mv.visitInsn(ATHROW);
                        mv.visitLabel(l27);
                        mv.visitLineNumber(120, l27);
                        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
                        mv.visitTypeInsn(NEW, "com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest");
                        mv.visitInsn(DUP);
                        mv.visitMethodInsn(INVOKESPECIAL, "com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest", "<init>", "()V", false);
                        mv.visitVarInsn(ASTORE, 6);
                        Label l31 = new Label();
                        mv.visitLabel(l31);
                        mv.visitLineNumber(121, l31);
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitVarInsn(ALOAD, 2);
                        mv.visitFieldInsn(PUTFIELD, "com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest", "accessToken", "Ljava/lang/String;");
                        Label l32 = new Label();
                        mv.visitLabel(l32);
                        mv.visitLineNumber(122, l32);
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitVarInsn(ALOAD, 1);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/GameProfile", "getId", "()Ljava/util/UUID;", false);
                        mv.visitFieldInsn(PUTFIELD, "com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest", "selectedProfile", "Ljava/util/UUID;");
                        Label l33 = new Label();
                        mv.visitLabel(l33);
                        mv.visitLineNumber(123, l33);
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitVarInsn(ALOAD, 3);
                        mv.visitFieldInsn(PUTFIELD, "com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest", "serverId", "Ljava/lang/String;");
                        mv.visitLabel(l3);
                        mv.visitLineNumber(126, l3);
                        mv.visitVarInsn(ALOAD, 0);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService", "getAuthenticationService", "()Lcom/mojang/authlib/yggdrasil/YggdrasilAuthenticationService;", false);
                        mv.visitTypeInsn(NEW, "java/net/URL");
                        mv.visitInsn(DUP);
                        mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
                        mv.visitInsn(DUP);
                        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
                        mv.visitFieldInsn(GETSTATIC, "org/tlsp/mc/wrapper/TLSPAgentWrapper", "Instance", "Lorg/tlsp/mc/wrapper/TLSPAgentWrapper;");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "org/tlsp/mc/wrapper/TLSPAgentWrapper", "getAPIURL", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                        mv.visitLdcInsn("/session/minecraft/join");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKESPECIAL, "java/net/URL", "<init>", "(Ljava/lang/String;)V", false);
                        mv.visitVarInsn(ALOAD, 6);
                        mv.visitLdcInsn(Type.getType("Lcom/mojang/authlib/yggdrasil/response/Response;"));
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/YggdrasilAuthenticationService", "makeRequest", "(Ljava/net/URL;Ljava/lang/Object;Ljava/lang/Class;)Lcom/mojang/authlib/yggdrasil/response/Response;", false);
                        mv.visitVarInsn(ASTORE, 7);
                        Label l34 = new Label();
                        mv.visitLabel(l34);
                        mv.visitLineNumber(127, l34);
                        mv.visitVarInsn(ALOAD, 7);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/response/Response", "getCause", "()Ljava/lang/String;", false);
                        mv.visitLdcInsn("0");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
                        mv.visitJumpInsn(IFEQ, l6);
                        Label l35 = new Label();
                        mv.visitLabel(l35);
                        mv.visitLineNumber(128, l35);
                        mv.visitVarInsn(ILOAD, 4);
                        mv.visitJumpInsn(IFEQ, l4);
                        Label l36 = new Label();
                        mv.visitLabel(l36);
                        mv.visitLineNumber(129, l36);
                        mv.visitLdcInsn("canJoinServer");
                        mv.visitLdcInsn("true");
                        mv.visitMethodInsn(INVOKESTATIC, "org/tlsp/mc/utils/NetworkUtils", "putTGlobalValue", "(Ljava/lang/String;Ljava/lang/String;)Z", false);
                        mv.visitInsn(POP);
                        mv.visitLabel(l4);
                        mv.visitLineNumber(131, l4);
                        mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"com/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest", "com/mojang/authlib/yggdrasil/response/Response"}, 0, null);
                        mv.visitInsn(RETURN);
                        mv.visitLabel(l6);
                        mv.visitLineNumber(133, l6);
                        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
                        mv.visitVarInsn(ALOAD, 7);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/response/Response", "getCause", "()Ljava/lang/String;", false);
                        mv.visitLdcInsn("-1");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
                        mv.visitJumpInsn(IFEQ, l7);
                        Label l37 = new Label();
                        mv.visitLabel(l37);
                        mv.visitLineNumber(134, l37);
                        mv.visitTypeInsn(NEW, "java/io/IOException");
                        mv.visitInsn(DUP);
                        mv.visitVarInsn(ALOAD, 7);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "com/mojang/authlib/yggdrasil/response/Response", "getErrorMessage", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKESPECIAL, "java/io/IOException", "<init>", "(Ljava/lang/String;)V", false);
                        mv.visitInsn(ATHROW);
                        mv.visitLabel(l7);
                        mv.visitLineNumber(140, l7);
                        mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
                        Label l38 = new Label();
                        mv.visitJumpInsn(GOTO, l38);
                        mv.visitLabel(l5);
                        mv.visitLineNumber(136, l5);
                        mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Exception"});
                        mv.visitVarInsn(ASTORE, 7);
                        Label l39 = new Label();
                        mv.visitLabel(l39);
                        mv.visitLineNumber(137, l39);
                        mv.visitVarInsn(ALOAD, 7);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "printStackTrace", "()V", false);
                        Label l40 = new Label();
                        mv.visitLabel(l40);
                        mv.visitLineNumber(138, l40);
                        mv.visitFieldInsn(GETSTATIC, "java/lang/System", "err", "Ljava/io/PrintStream;");
                        mv.visitVarInsn(ALOAD, 7);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/Object;)V", false);
                        Label l41 = new Label();
                        mv.visitLabel(l41);
                        mv.visitLineNumber(139, l41);
                        mv.visitTypeInsn(NEW, "com/mojang/authlib/exceptions/AuthenticationException");
                        mv.visitInsn(DUP);
                        mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
                        mv.visitInsn(DUP);
                        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
                        mv.visitVarInsn(ALOAD, 7);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                        mv.visitLdcInsn("\u0009 ");
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                        mv.visitVarInsn(ALOAD, 7);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Exception", "getMessage", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
                        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
                        mv.visitMethodInsn(INVOKESPECIAL, "com/mojang/authlib/exceptions/AuthenticationException", "<init>", "(Ljava/lang/String;)V", false);
                        mv.visitInsn(ATHROW);
                        mv.visitLabel(l38);
                        mv.visitLineNumber(142, l38);
                        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
                        mv.visitTypeInsn(NEW, "com/mojang/authlib/exceptions/AuthenticationException");
                        mv.visitInsn(DUP);
                        mv.visitLdcInsn("\u9a8c\u8bc1\u670d\u52a1\u8c03\u7528\u5931\u8d25,\u8bf7\u91cd\u8bd5");
                        mv.visitMethodInsn(INVOKESPECIAL, "com/mojang/authlib/exceptions/AuthenticationException", "<init>", "(Ljava/lang/String;)V", false);
                        mv.visitInsn(ATHROW);
                        Label l42 = new Label();
                        mv.visitLabel(l42);
                        mv.visitLocalVariable("callbackInfoWrapper", "Lorg/tlsp/mc/wrapper/mac/MixinCallbackInfoWrapper;", null, l17, l18, 6);
                        mv.visitLocalVariable("e", "Ljava/lang/Exception;", null, l28, l27, 6);
                        mv.visitLocalVariable("response", "Lcom/mojang/authlib/yggdrasil/response/Response;", null, l34, l7, 7);
                        mv.visitLocalVariable("e", "Ljava/lang/Exception;", null, l39, l38, 7);
                        mv.visitLocalVariable("this", "Lcom/mojang/authlib/yggdrasil/YggdrasilMinecraftSessionService;", null, l8, l42, 0);
                        mv.visitLocalVariable("profile", "Lcom/mojang/authlib/GameProfile;", null, l8, l42, 1);
                        mv.visitLocalVariable("authenticationToken", "Ljava/lang/String;", null, l8, l42, 2);
                        mv.visitLocalVariable("serverId", "Ljava/lang/String;", null, l8, l42, 3);
                        mv.visitLocalVariable("isMacServer", "Z", null, l9, l42, 4);
                        mv.visitLocalVariable("isMacClient", "Z", null, l10, l42, 5);
                        mv.visitLocalVariable("request", "Lcom/mojang/authlib/yggdrasil/request/JoinMinecraftServerRequest;", null, l31, l42, 6);
                        mv.visitMaxs(6, 8);
                    }
                    mv.visitEnd();
                    return null;
                }
                return mv;
            }
        },0);

        byte[] buffer = cw.toByteArray();
        File file = new File(className.replace("/",".") + ".class");
        try {
            if (file.exists()){
                file.delete();
            }
            file.createNewFile();
            FileOutputStream out = new FileOutputStream(file);
            out.write(buffer);
            out.close();
        }catch (Exception e){

        }

        return buffer;
    }
}
